

==========================================================
Linux Kernel APIs
==========================================================

1) request_threaded_irq â€” allocate an interrupt line

	int request_threaded_irq (	unsigned int irq,
 	irq_handler_t handler,
 	irq_handler_t thread_fn,
 	unsigned long irqflags,
 	const char * devname,
 	void * dev_id);
 
Arguments
-----------
	unsigned int irq
	Interrupt line to allocate

	irq_handler_t handler
	Function to be called when the IRQ occurs. Primary handler for threaded 
	interrupts If NULL and thread_fn != NULL the default primary handler is installed

	irq_handler_t thread_fn
	Function called from the irq handler thread If NULL, no irq thread is created

	unsigned long irqflags
	Interrupt type flags

	const char * devname
	An ascii name for the claiming device

	void * dev_id
	A cookie passed back to the handler function
	
Description
-------------
This call allocates interrupt resources and enables the interrupt line and 
IRQ handling. From the point this call is made your handler function may be 
invoked. Since your handler function must clear any interrupt the board raises,
you must take care both to initialise your hardware and to set up the interrupt
handler in the right order.
If you want to set up a threaded irq handler for your device then you need to
supply handler and thread_fn. handler is still called in hard interrupt context
and has to check whether the interrupt originates from the device. If yes it needs
to disable the interrupt on the device and return IRQ_WAKE_THREAD which will wake 
up the handler thread and run thread_fn. This split handler design is necessary to
support shared interrupts.
