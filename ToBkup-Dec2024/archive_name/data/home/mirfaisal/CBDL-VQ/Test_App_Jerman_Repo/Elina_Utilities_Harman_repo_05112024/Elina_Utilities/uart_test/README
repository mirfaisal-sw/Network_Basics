UART Test : Testing utility for uart devices.
This app can be used to test uart devices configured for serial communications.
Supported OSs : Linux, Android, QNX.


Usage
========================================================================================
1) Usage can be seen using 'uart_test -h' :-
	Usage: uart_test  [OPTION]...
	Test UART (Version 1.1)

	Options:
	  -n <name>      UART device name (default: /dev/ser2)
	  -s <speed>     Set UART speed/baud rate in bps (default: 1000000)\n"
	  -m <mode>      Set mode:  0: read-only; read inputted number of packets
	                            1: write-only; write inputted number of packets
	                            2: write-read; continuously write-read; should be used for loopback test
	                            (default: 2)
	  -p <packets>   Number of packets to transfer in read-only or write-only mode; 0 for continuous modes (default: 8 packets)
	  -l <length>    Length of a packet in bytes (default: 256 bytes)
	  -d <delay>     Delay in usec after which a packet will be transmitted; applicable for write operations only (default: 20000 usec)
	  -v             Increase the verbosity of logs; accepted multiple times to increase verbosity further (min: 1, max: 8, default: 6)
	  -h             Print this help message
	  <hexdata>      Data to be written; enter data byte by byte in HEX
	                 (default: [0x0...0x0] [0x1...0x0] [0x2...0x0] ... [0xFF...0x0] [0x0...0x0] ...)

2) Reading from the uart dev node (in mode-0 & mode-2) is done in blocking mode
   i.e. the utility waits for any incoming data.

3) In mode-2 (Write-Read), writing to and reading from the uart dev node is
   performed in parallel and both activities don't depend on each other i.e
   writing to the uart dev node is done periodically irrespective of the reading
   from the uart dev node and vice versa.

4) Any data that is written to the uart dev node (in mode-1 & mode-2) and any data
   that is read from the uart dev node (in mode-0 & mode-2) is printed via selected
   logging mechanism (see sec: "Build Options" for further details).

5) Mode-2 can be used for "loopback test". In this, it is expected that data
   written to the uart is looped back.

6) User-defined data for writing can be provided. It must be in hex format and
   must be the last option.

7) If user-defined data is not provided, then default data pattern is used for
   writing. Format of default data pattern is :
	- it starts with entire write buffer initialized to 0x0.
	- with every write operation, least significant byte is incremented by
	  1.
	- post 0xFF, least significant byte overflows and becomes 0x0.
	- rest of the bytes are always 0x0.

8) Default data pattern can be used in "loopack test" to verify whether received
   data is in sequence or not.


Build Options
========================================================================================

1) Target OS Support :-
	Option: TARGET_OS
	Possible values: linux(default), qnx.

2) Target architecture/variant :-
	Option: PLATFORM
	Possible values: aarch64le(default), armv7le, x86_64, x86

3) Build profile :-
	Option: BUILD_PROFILE
	Possible values: release(default), debug, profile, coverage

4) Logging Support :-
	Option: LOGGING
	Possible values: SYSLOG_LOGGING, DLT_LOGGING, ANDROID_LOGGING,
	                 QNX_SLOG_LOGGING, QNX_SLOG2_LOGGING.

	Supported Options depends on Target OS :
	For Linux - (TARGET_OS can be empty or set to linux)
		- Printf (Default),
		- Syslog (LOGGING=SYSLOG_LOGGING),
		- Dlt (LOGGING=DLT_LOGGING)
	For Android - (TARGET_OS can be empty or set to linux)
		- Printf (Default),
		- Android logging (LOGGING=ANDROID_LOGGING),
		- Syslog (LOGGING=SYSLOG_LOGGING),
		- Dlt (LOGGING=DLT_LOGGING)
	For QNX - (TARGET_OS needs to be set to qnx)
		- Printf (Default),
		- Slogger2 (LOGGING=QNX_SLOG2_LOGGING),
		- Slogger (LOGGING=QNX_SLOG_LOGGING),
		- Syslog (LOGGING=SYSLOG_LOGGING),
		- Dlt (LOGGING=DLT_LOGGING)


Compilation Steps
========================================================================================
[I] For Linux & QNX ->
1) To Compile :-
   make <BUILD OPTIONS> all
   E.g. :
	- To compile for Linux for ARM 64bit little-endian architecture with
	  logging on console:
	  make all

	- To compile for Linux for x86_64 architecture with Syslog based
	  logging:
	  make PLATFORM=x86_64 LOGGING=SYSLOG_LOGGING all

	- To compile for QNX for ARM 64bit little-endian architecture with QNX
	  Slogger based logging:
	  make TARGET_OS=qnx LOGGING=QNX_SLOG_LOGGING all

	- To compile for Android for ARM 64bit little-endian architecture with
	  Android Logger based logging with debug build-profile:
	  make LOGGING=ANDROID_LOGGING BUILD_PROFILE=debug all

2) UART Test Path :-
	<uart_test_dir>/build/$(PLATFORM)-$(BUILD_PROFILE)/uart_test

3) To Clean :-
	make clean


[II] For Android ->
1) To Compile :-
	(a) Copy 'uart_test' folder to <Android-sdk-root-folder>/vendor/harman/tools/
	
	(b) Export environment variables.
	
	(c) Source build environment script :
	    source build/envsetup.sh
	
	(d) Select target using lunch menu :
	    lunch <lunch_target_name>
	    For e.g. for TML HQX :
	    lunch titan_vtml_b2-userdebug
	
	(e) Go to 'uart_test' folder :
	    cd <Android-sdk-root-folder>/vendor/harman/tools/uart_test
	
	(f) Build uart_test module :
	    mm

2) UART Test Path :-
	<Android-sdk-root-folder>/out/target/product/<lunch_target_name>/vendor/bin/uart_test
	For e.g. for TML HQX :
	<Android-sdk-root-folder>/out/target/product/titan_vtml_b2-userdebug/vendor/bin/uart_test

3) To Clean :-
	mm clean


Author
========================================================================================
Created by Prasad Lavande <prasad.lavande@harman.com>
